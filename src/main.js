// in short, "use strict" will clean up some of the messier behaviors of javascript,
// and help us to avoid frustrating bugs, in exchange for being stricter about our syntax.
// Errors generated by use strict will show up in the console window of the browser!
"use strict";

// this line at the top of all the files makes sure that they all have access to the same app object,
// independent of when the browser loads the js files. Either app is already defined from another file, or 
// app evaluates to undefined (or false) and then it is instantiated with {} into an empty object.
// each "var app" is thus a pointer to the same object, essentially, even though they are all different variables.
var app = app || {};


// main is instantiated with an IIFE, or immediately invoked function expression. Because the function has a () after its
// closing brace, it is immediately executed upon being declared, and main is assigned its return value. Because the function
// is anonymous, it can never be run again - making its internal scope private to the objects and functions declared within it,
// and effectively making main (and other modules instantiated this way) into a singleton, in some sense. They are initialized 
// once, and their initialization logic can never be executed again elsewhere.
app.main = function(){

	// this obj will eventually be app.main
	var obj = {};

	// loader is a sub module of main, also instantiated with an IIFE.
	// it will be used to load JSON objects asynchronously, as well as manage onload functions.
	var obj.loader = function(){


	}();


	return obj;
}();