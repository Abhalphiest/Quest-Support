// in short, "use strict" will clean up some of the messier behaviors of javascript,
// and help us to avoid frustrating bugs, in exchange for being stricter about our syntax.
// Errors generated by use strict will show up in the console window of the browser!
"use strict";

// this line at the top of all the files makes sure that they all have access to the same app object,
// independent of when the browser loads the js files. Either app is already defined from another file, or 
// app evaluates to undefined (or false) and then it is instantiated with {} into an empty object.
// each "var app" is thus a pointer to the same object, essentially, even though they are all different variables.
var app = app || {};


// main is instantiated with an IIFE, or immediately invoked function expression. Because the function has a () after its
// closing brace, it is immediately executed upon being declared, and main is assigned its return value. Because the function
// is anonymous, it can never be run again - making its internal scope private to the objects and functions declared within it,
// and effectively making main (and other modules instantiated this way) into a singleton, in some sense. They are initialized 
// once, and their initialization logic can never be executed again elsewhere.
app.main = function(){

	// this obj will eventually be app.main
	var obj = {};

	// loader is a sub module of main, also instantiated with an IIFE.
	// it will be used to load JSON objects asynchronously, as well as manage onload functions.
	obj.loader = function(){

		// this will eventually be app.main.loader
		var obj = {};

		// by the design of addOnLoadEvent, this will execute after every module has finished all its
		// onload logic (that is, they should be more or less initialized, save for JSON requests)
		function onOnLoadEventsComplete(){

		}
		window.onload = onOnLoadEventsComplete;
		// adds the function f that is passed in to a massive window.onload function
		// in short, it consolidates all the logic we need on page load into a single function, 
		// so that we can keep onload logic within the individual modules for organization
		// and readability
		obj.addOnLoadEvent = function(f){
			var prevOnLoad = window.onload;
			if( typeof window.onload != 'function'){
				window.onload = f;
			}
			else{
				window.onload = function(){
					f();
					if(prevOnLoad){ // first function in, last function called. important for implementation.
						prevOnLoad();
					}
				}
			}

		};

		// this variable will be accessible only to functions inside of app.main.loader
		// it tracks the number of json files that are currently being loaded asynchronously
		// so we can tell when it is safe to proceed with game execution
		var filesLoading = 0;

		// loads a JSON file, and calls the callback function with the data in the JSON file once it has
		// finished loading.
		obj.loadJSON = function(filepath,callback){
			filesLoading++;

			var request = new XMLHttpRequest();
			request.open('GET',filepath);
			request.responseType = 'json';
			request.send();
			request.onload = onResponseReceived;
			request.onerror = function(){console.log("error loading "+ filepath);};
			

			function onResponseReceived(){
				callback(request.response);
				filesLoading--;
			}

		};

		return obj;
	}();


	return obj;
}();